package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/olezhek28/microservices_course/week_4/clean_redis/internal/client/cache.RedisClient -o ./mocks/redis_client_minimock.go -n RedisClientMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RedisClientMock implements cache.RedisClient
type RedisClientMock struct {
	t minimock.Tester

	funcExpire          func(ctx context.Context, key string, expiration time.Duration) (err error)
	inspectFuncExpire   func(ctx context.Context, key string, expiration time.Duration)
	afterExpireCounter  uint64
	beforeExpireCounter uint64
	ExpireMock          mRedisClientMockExpire

	funcGet          func(ctx context.Context, key string) (p1 interface{}, err error)
	inspectFuncGet   func(ctx context.Context, key string)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mRedisClientMockGet

	funcHGetAll          func(ctx context.Context, key string) (pa1 []interface{}, err error)
	inspectFuncHGetAll   func(ctx context.Context, key string)
	afterHGetAllCounter  uint64
	beforeHGetAllCounter uint64
	HGetAllMock          mRedisClientMockHGetAll

	funcHashSet          func(ctx context.Context, key string, values interface{}) (err error)
	inspectFuncHashSet   func(ctx context.Context, key string, values interface{})
	afterHashSetCounter  uint64
	beforeHashSetCounter uint64
	HashSetMock          mRedisClientMockHashSet

	funcPing          func(ctx context.Context) (err error)
	inspectFuncPing   func(ctx context.Context)
	afterPingCounter  uint64
	beforePingCounter uint64
	PingMock          mRedisClientMockPing

	funcSet          func(ctx context.Context, key string, value interface{}) (err error)
	inspectFuncSet   func(ctx context.Context, key string, value interface{})
	afterSetCounter  uint64
	beforeSetCounter uint64
	SetMock          mRedisClientMockSet
}

// NewRedisClientMock returns a mock for cache.RedisClient
func NewRedisClientMock(t minimock.Tester) *RedisClientMock {
	m := &RedisClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ExpireMock = mRedisClientMockExpire{mock: m}
	m.ExpireMock.callArgs = []*RedisClientMockExpireParams{}

	m.GetMock = mRedisClientMockGet{mock: m}
	m.GetMock.callArgs = []*RedisClientMockGetParams{}

	m.HGetAllMock = mRedisClientMockHGetAll{mock: m}
	m.HGetAllMock.callArgs = []*RedisClientMockHGetAllParams{}

	m.HashSetMock = mRedisClientMockHashSet{mock: m}
	m.HashSetMock.callArgs = []*RedisClientMockHashSetParams{}

	m.PingMock = mRedisClientMockPing{mock: m}
	m.PingMock.callArgs = []*RedisClientMockPingParams{}

	m.SetMock = mRedisClientMockSet{mock: m}
	m.SetMock.callArgs = []*RedisClientMockSetParams{}

	return m
}

type mRedisClientMockExpire struct {
	mock               *RedisClientMock
	defaultExpectation *RedisClientMockExpireExpectation
	expectations       []*RedisClientMockExpireExpectation

	callArgs []*RedisClientMockExpireParams
	mutex    sync.RWMutex
}

// RedisClientMockExpireExpectation specifies expectation struct of the RedisClient.Expire
type RedisClientMockExpireExpectation struct {
	mock    *RedisClientMock
	params  *RedisClientMockExpireParams
	results *RedisClientMockExpireResults
	Counter uint64
}

// RedisClientMockExpireParams contains parameters of the RedisClient.Expire
type RedisClientMockExpireParams struct {
	ctx        context.Context
	key        string
	expiration time.Duration
}

// RedisClientMockExpireResults contains results of the RedisClient.Expire
type RedisClientMockExpireResults struct {
	err error
}

// Expect sets up expected params for RedisClient.Expire
func (mmExpire *mRedisClientMockExpire) Expect(ctx context.Context, key string, expiration time.Duration) *mRedisClientMockExpire {
	if mmExpire.mock.funcExpire != nil {
		mmExpire.mock.t.Fatalf("RedisClientMock.Expire mock is already set by Set")
	}

	if mmExpire.defaultExpectation == nil {
		mmExpire.defaultExpectation = &RedisClientMockExpireExpectation{}
	}

	mmExpire.defaultExpectation.params = &RedisClientMockExpireParams{ctx, key, expiration}
	for _, e := range mmExpire.expectations {
		if minimock.Equal(e.params, mmExpire.defaultExpectation.params) {
			mmExpire.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmExpire.defaultExpectation.params)
		}
	}

	return mmExpire
}

// Inspect accepts an inspector function that has same arguments as the RedisClient.Expire
func (mmExpire *mRedisClientMockExpire) Inspect(f func(ctx context.Context, key string, expiration time.Duration)) *mRedisClientMockExpire {
	if mmExpire.mock.inspectFuncExpire != nil {
		mmExpire.mock.t.Fatalf("Inspect function is already set for RedisClientMock.Expire")
	}

	mmExpire.mock.inspectFuncExpire = f

	return mmExpire
}

// Return sets up results that will be returned by RedisClient.Expire
func (mmExpire *mRedisClientMockExpire) Return(err error) *RedisClientMock {
	if mmExpire.mock.funcExpire != nil {
		mmExpire.mock.t.Fatalf("RedisClientMock.Expire mock is already set by Set")
	}

	if mmExpire.defaultExpectation == nil {
		mmExpire.defaultExpectation = &RedisClientMockExpireExpectation{mock: mmExpire.mock}
	}
	mmExpire.defaultExpectation.results = &RedisClientMockExpireResults{err}
	return mmExpire.mock
}

// Set uses given function f to mock the RedisClient.Expire method
func (mmExpire *mRedisClientMockExpire) Set(f func(ctx context.Context, key string, expiration time.Duration) (err error)) *RedisClientMock {
	if mmExpire.defaultExpectation != nil {
		mmExpire.mock.t.Fatalf("Default expectation is already set for the RedisClient.Expire method")
	}

	if len(mmExpire.expectations) > 0 {
		mmExpire.mock.t.Fatalf("Some expectations are already set for the RedisClient.Expire method")
	}

	mmExpire.mock.funcExpire = f
	return mmExpire.mock
}

// When sets expectation for the RedisClient.Expire which will trigger the result defined by the following
// Then helper
func (mmExpire *mRedisClientMockExpire) When(ctx context.Context, key string, expiration time.Duration) *RedisClientMockExpireExpectation {
	if mmExpire.mock.funcExpire != nil {
		mmExpire.mock.t.Fatalf("RedisClientMock.Expire mock is already set by Set")
	}

	expectation := &RedisClientMockExpireExpectation{
		mock:   mmExpire.mock,
		params: &RedisClientMockExpireParams{ctx, key, expiration},
	}
	mmExpire.expectations = append(mmExpire.expectations, expectation)
	return expectation
}

// Then sets up RedisClient.Expire return parameters for the expectation previously defined by the When method
func (e *RedisClientMockExpireExpectation) Then(err error) *RedisClientMock {
	e.results = &RedisClientMockExpireResults{err}
	return e.mock
}

// Expire implements cache.RedisClient
func (mmExpire *RedisClientMock) Expire(ctx context.Context, key string, expiration time.Duration) (err error) {
	mm_atomic.AddUint64(&mmExpire.beforeExpireCounter, 1)
	defer mm_atomic.AddUint64(&mmExpire.afterExpireCounter, 1)

	if mmExpire.inspectFuncExpire != nil {
		mmExpire.inspectFuncExpire(ctx, key, expiration)
	}

	mm_params := &RedisClientMockExpireParams{ctx, key, expiration}

	// Record call args
	mmExpire.ExpireMock.mutex.Lock()
	mmExpire.ExpireMock.callArgs = append(mmExpire.ExpireMock.callArgs, mm_params)
	mmExpire.ExpireMock.mutex.Unlock()

	for _, e := range mmExpire.ExpireMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmExpire.ExpireMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmExpire.ExpireMock.defaultExpectation.Counter, 1)
		mm_want := mmExpire.ExpireMock.defaultExpectation.params
		mm_got := RedisClientMockExpireParams{ctx, key, expiration}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmExpire.t.Errorf("RedisClientMock.Expire got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmExpire.ExpireMock.defaultExpectation.results
		if mm_results == nil {
			mmExpire.t.Fatal("No results are set for the RedisClientMock.Expire")
		}
		return (*mm_results).err
	}
	if mmExpire.funcExpire != nil {
		return mmExpire.funcExpire(ctx, key, expiration)
	}
	mmExpire.t.Fatalf("Unexpected call to RedisClientMock.Expire. %v %v %v", ctx, key, expiration)
	return
}

// ExpireAfterCounter returns a count of finished RedisClientMock.Expire invocations
func (mmExpire *RedisClientMock) ExpireAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExpire.afterExpireCounter)
}

// ExpireBeforeCounter returns a count of RedisClientMock.Expire invocations
func (mmExpire *RedisClientMock) ExpireBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExpire.beforeExpireCounter)
}

// Calls returns a list of arguments used in each call to RedisClientMock.Expire.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmExpire *mRedisClientMockExpire) Calls() []*RedisClientMockExpireParams {
	mmExpire.mutex.RLock()

	argCopy := make([]*RedisClientMockExpireParams, len(mmExpire.callArgs))
	copy(argCopy, mmExpire.callArgs)

	mmExpire.mutex.RUnlock()

	return argCopy
}

// MinimockExpireDone returns true if the count of the Expire invocations corresponds
// the number of defined expectations
func (m *RedisClientMock) MinimockExpireDone() bool {
	for _, e := range m.ExpireMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ExpireMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterExpireCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExpire != nil && mm_atomic.LoadUint64(&m.afterExpireCounter) < 1 {
		return false
	}
	return true
}

// MinimockExpireInspect logs each unmet expectation
func (m *RedisClientMock) MinimockExpireInspect() {
	for _, e := range m.ExpireMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RedisClientMock.Expire with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ExpireMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterExpireCounter) < 1 {
		if m.ExpireMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RedisClientMock.Expire")
		} else {
			m.t.Errorf("Expected call to RedisClientMock.Expire with params: %#v", *m.ExpireMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExpire != nil && mm_atomic.LoadUint64(&m.afterExpireCounter) < 1 {
		m.t.Error("Expected call to RedisClientMock.Expire")
	}
}

type mRedisClientMockGet struct {
	mock               *RedisClientMock
	defaultExpectation *RedisClientMockGetExpectation
	expectations       []*RedisClientMockGetExpectation

	callArgs []*RedisClientMockGetParams
	mutex    sync.RWMutex
}

// RedisClientMockGetExpectation specifies expectation struct of the RedisClient.Get
type RedisClientMockGetExpectation struct {
	mock    *RedisClientMock
	params  *RedisClientMockGetParams
	results *RedisClientMockGetResults
	Counter uint64
}

// RedisClientMockGetParams contains parameters of the RedisClient.Get
type RedisClientMockGetParams struct {
	ctx context.Context
	key string
}

// RedisClientMockGetResults contains results of the RedisClient.Get
type RedisClientMockGetResults struct {
	p1  interface{}
	err error
}

// Expect sets up expected params for RedisClient.Get
func (mmGet *mRedisClientMockGet) Expect(ctx context.Context, key string) *mRedisClientMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("RedisClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &RedisClientMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &RedisClientMockGetParams{ctx, key}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the RedisClient.Get
func (mmGet *mRedisClientMockGet) Inspect(f func(ctx context.Context, key string)) *mRedisClientMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for RedisClientMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by RedisClient.Get
func (mmGet *mRedisClientMockGet) Return(p1 interface{}, err error) *RedisClientMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("RedisClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &RedisClientMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &RedisClientMockGetResults{p1, err}
	return mmGet.mock
}

// Set uses given function f to mock the RedisClient.Get method
func (mmGet *mRedisClientMockGet) Set(f func(ctx context.Context, key string) (p1 interface{}, err error)) *RedisClientMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the RedisClient.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the RedisClient.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the RedisClient.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mRedisClientMockGet) When(ctx context.Context, key string) *RedisClientMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("RedisClientMock.Get mock is already set by Set")
	}

	expectation := &RedisClientMockGetExpectation{
		mock:   mmGet.mock,
		params: &RedisClientMockGetParams{ctx, key},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up RedisClient.Get return parameters for the expectation previously defined by the When method
func (e *RedisClientMockGetExpectation) Then(p1 interface{}, err error) *RedisClientMock {
	e.results = &RedisClientMockGetResults{p1, err}
	return e.mock
}

// Get implements cache.RedisClient
func (mmGet *RedisClientMock) Get(ctx context.Context, key string) (p1 interface{}, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, key)
	}

	mm_params := &RedisClientMockGetParams{ctx, key}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := RedisClientMockGetParams{ctx, key}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("RedisClientMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the RedisClientMock.Get")
		}
		return (*mm_results).p1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, key)
	}
	mmGet.t.Fatalf("Unexpected call to RedisClientMock.Get. %v %v", ctx, key)
	return
}

// GetAfterCounter returns a count of finished RedisClientMock.Get invocations
func (mmGet *RedisClientMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of RedisClientMock.Get invocations
func (mmGet *RedisClientMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to RedisClientMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mRedisClientMockGet) Calls() []*RedisClientMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*RedisClientMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *RedisClientMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *RedisClientMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RedisClientMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RedisClientMock.Get")
		} else {
			m.t.Errorf("Expected call to RedisClientMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to RedisClientMock.Get")
	}
}

type mRedisClientMockHGetAll struct {
	mock               *RedisClientMock
	defaultExpectation *RedisClientMockHGetAllExpectation
	expectations       []*RedisClientMockHGetAllExpectation

	callArgs []*RedisClientMockHGetAllParams
	mutex    sync.RWMutex
}

// RedisClientMockHGetAllExpectation specifies expectation struct of the RedisClient.HGetAll
type RedisClientMockHGetAllExpectation struct {
	mock    *RedisClientMock
	params  *RedisClientMockHGetAllParams
	results *RedisClientMockHGetAllResults
	Counter uint64
}

// RedisClientMockHGetAllParams contains parameters of the RedisClient.HGetAll
type RedisClientMockHGetAllParams struct {
	ctx context.Context
	key string
}

// RedisClientMockHGetAllResults contains results of the RedisClient.HGetAll
type RedisClientMockHGetAllResults struct {
	pa1 []interface{}
	err error
}

// Expect sets up expected params for RedisClient.HGetAll
func (mmHGetAll *mRedisClientMockHGetAll) Expect(ctx context.Context, key string) *mRedisClientMockHGetAll {
	if mmHGetAll.mock.funcHGetAll != nil {
		mmHGetAll.mock.t.Fatalf("RedisClientMock.HGetAll mock is already set by Set")
	}

	if mmHGetAll.defaultExpectation == nil {
		mmHGetAll.defaultExpectation = &RedisClientMockHGetAllExpectation{}
	}

	mmHGetAll.defaultExpectation.params = &RedisClientMockHGetAllParams{ctx, key}
	for _, e := range mmHGetAll.expectations {
		if minimock.Equal(e.params, mmHGetAll.defaultExpectation.params) {
			mmHGetAll.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHGetAll.defaultExpectation.params)
		}
	}

	return mmHGetAll
}

// Inspect accepts an inspector function that has same arguments as the RedisClient.HGetAll
func (mmHGetAll *mRedisClientMockHGetAll) Inspect(f func(ctx context.Context, key string)) *mRedisClientMockHGetAll {
	if mmHGetAll.mock.inspectFuncHGetAll != nil {
		mmHGetAll.mock.t.Fatalf("Inspect function is already set for RedisClientMock.HGetAll")
	}

	mmHGetAll.mock.inspectFuncHGetAll = f

	return mmHGetAll
}

// Return sets up results that will be returned by RedisClient.HGetAll
func (mmHGetAll *mRedisClientMockHGetAll) Return(pa1 []interface{}, err error) *RedisClientMock {
	if mmHGetAll.mock.funcHGetAll != nil {
		mmHGetAll.mock.t.Fatalf("RedisClientMock.HGetAll mock is already set by Set")
	}

	if mmHGetAll.defaultExpectation == nil {
		mmHGetAll.defaultExpectation = &RedisClientMockHGetAllExpectation{mock: mmHGetAll.mock}
	}
	mmHGetAll.defaultExpectation.results = &RedisClientMockHGetAllResults{pa1, err}
	return mmHGetAll.mock
}

// Set uses given function f to mock the RedisClient.HGetAll method
func (mmHGetAll *mRedisClientMockHGetAll) Set(f func(ctx context.Context, key string) (pa1 []interface{}, err error)) *RedisClientMock {
	if mmHGetAll.defaultExpectation != nil {
		mmHGetAll.mock.t.Fatalf("Default expectation is already set for the RedisClient.HGetAll method")
	}

	if len(mmHGetAll.expectations) > 0 {
		mmHGetAll.mock.t.Fatalf("Some expectations are already set for the RedisClient.HGetAll method")
	}

	mmHGetAll.mock.funcHGetAll = f
	return mmHGetAll.mock
}

// When sets expectation for the RedisClient.HGetAll which will trigger the result defined by the following
// Then helper
func (mmHGetAll *mRedisClientMockHGetAll) When(ctx context.Context, key string) *RedisClientMockHGetAllExpectation {
	if mmHGetAll.mock.funcHGetAll != nil {
		mmHGetAll.mock.t.Fatalf("RedisClientMock.HGetAll mock is already set by Set")
	}

	expectation := &RedisClientMockHGetAllExpectation{
		mock:   mmHGetAll.mock,
		params: &RedisClientMockHGetAllParams{ctx, key},
	}
	mmHGetAll.expectations = append(mmHGetAll.expectations, expectation)
	return expectation
}

// Then sets up RedisClient.HGetAll return parameters for the expectation previously defined by the When method
func (e *RedisClientMockHGetAllExpectation) Then(pa1 []interface{}, err error) *RedisClientMock {
	e.results = &RedisClientMockHGetAllResults{pa1, err}
	return e.mock
}

// HGetAll implements cache.RedisClient
func (mmHGetAll *RedisClientMock) HGetAll(ctx context.Context, key string) (pa1 []interface{}, err error) {
	mm_atomic.AddUint64(&mmHGetAll.beforeHGetAllCounter, 1)
	defer mm_atomic.AddUint64(&mmHGetAll.afterHGetAllCounter, 1)

	if mmHGetAll.inspectFuncHGetAll != nil {
		mmHGetAll.inspectFuncHGetAll(ctx, key)
	}

	mm_params := &RedisClientMockHGetAllParams{ctx, key}

	// Record call args
	mmHGetAll.HGetAllMock.mutex.Lock()
	mmHGetAll.HGetAllMock.callArgs = append(mmHGetAll.HGetAllMock.callArgs, mm_params)
	mmHGetAll.HGetAllMock.mutex.Unlock()

	for _, e := range mmHGetAll.HGetAllMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pa1, e.results.err
		}
	}

	if mmHGetAll.HGetAllMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHGetAll.HGetAllMock.defaultExpectation.Counter, 1)
		mm_want := mmHGetAll.HGetAllMock.defaultExpectation.params
		mm_got := RedisClientMockHGetAllParams{ctx, key}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHGetAll.t.Errorf("RedisClientMock.HGetAll got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHGetAll.HGetAllMock.defaultExpectation.results
		if mm_results == nil {
			mmHGetAll.t.Fatal("No results are set for the RedisClientMock.HGetAll")
		}
		return (*mm_results).pa1, (*mm_results).err
	}
	if mmHGetAll.funcHGetAll != nil {
		return mmHGetAll.funcHGetAll(ctx, key)
	}
	mmHGetAll.t.Fatalf("Unexpected call to RedisClientMock.HGetAll. %v %v", ctx, key)
	return
}

// HGetAllAfterCounter returns a count of finished RedisClientMock.HGetAll invocations
func (mmHGetAll *RedisClientMock) HGetAllAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHGetAll.afterHGetAllCounter)
}

// HGetAllBeforeCounter returns a count of RedisClientMock.HGetAll invocations
func (mmHGetAll *RedisClientMock) HGetAllBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHGetAll.beforeHGetAllCounter)
}

// Calls returns a list of arguments used in each call to RedisClientMock.HGetAll.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHGetAll *mRedisClientMockHGetAll) Calls() []*RedisClientMockHGetAllParams {
	mmHGetAll.mutex.RLock()

	argCopy := make([]*RedisClientMockHGetAllParams, len(mmHGetAll.callArgs))
	copy(argCopy, mmHGetAll.callArgs)

	mmHGetAll.mutex.RUnlock()

	return argCopy
}

// MinimockHGetAllDone returns true if the count of the HGetAll invocations corresponds
// the number of defined expectations
func (m *RedisClientMock) MinimockHGetAllDone() bool {
	for _, e := range m.HGetAllMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HGetAllMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHGetAllCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHGetAll != nil && mm_atomic.LoadUint64(&m.afterHGetAllCounter) < 1 {
		return false
	}
	return true
}

// MinimockHGetAllInspect logs each unmet expectation
func (m *RedisClientMock) MinimockHGetAllInspect() {
	for _, e := range m.HGetAllMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RedisClientMock.HGetAll with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HGetAllMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHGetAllCounter) < 1 {
		if m.HGetAllMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RedisClientMock.HGetAll")
		} else {
			m.t.Errorf("Expected call to RedisClientMock.HGetAll with params: %#v", *m.HGetAllMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHGetAll != nil && mm_atomic.LoadUint64(&m.afterHGetAllCounter) < 1 {
		m.t.Error("Expected call to RedisClientMock.HGetAll")
	}
}

type mRedisClientMockHashSet struct {
	mock               *RedisClientMock
	defaultExpectation *RedisClientMockHashSetExpectation
	expectations       []*RedisClientMockHashSetExpectation

	callArgs []*RedisClientMockHashSetParams
	mutex    sync.RWMutex
}

// RedisClientMockHashSetExpectation specifies expectation struct of the RedisClient.HashSet
type RedisClientMockHashSetExpectation struct {
	mock    *RedisClientMock
	params  *RedisClientMockHashSetParams
	results *RedisClientMockHashSetResults
	Counter uint64
}

// RedisClientMockHashSetParams contains parameters of the RedisClient.HashSet
type RedisClientMockHashSetParams struct {
	ctx    context.Context
	key    string
	values interface{}
}

// RedisClientMockHashSetResults contains results of the RedisClient.HashSet
type RedisClientMockHashSetResults struct {
	err error
}

// Expect sets up expected params for RedisClient.HashSet
func (mmHashSet *mRedisClientMockHashSet) Expect(ctx context.Context, key string, values interface{}) *mRedisClientMockHashSet {
	if mmHashSet.mock.funcHashSet != nil {
		mmHashSet.mock.t.Fatalf("RedisClientMock.HashSet mock is already set by Set")
	}

	if mmHashSet.defaultExpectation == nil {
		mmHashSet.defaultExpectation = &RedisClientMockHashSetExpectation{}
	}

	mmHashSet.defaultExpectation.params = &RedisClientMockHashSetParams{ctx, key, values}
	for _, e := range mmHashSet.expectations {
		if minimock.Equal(e.params, mmHashSet.defaultExpectation.params) {
			mmHashSet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHashSet.defaultExpectation.params)
		}
	}

	return mmHashSet
}

// Inspect accepts an inspector function that has same arguments as the RedisClient.HashSet
func (mmHashSet *mRedisClientMockHashSet) Inspect(f func(ctx context.Context, key string, values interface{})) *mRedisClientMockHashSet {
	if mmHashSet.mock.inspectFuncHashSet != nil {
		mmHashSet.mock.t.Fatalf("Inspect function is already set for RedisClientMock.HashSet")
	}

	mmHashSet.mock.inspectFuncHashSet = f

	return mmHashSet
}

// Return sets up results that will be returned by RedisClient.HashSet
func (mmHashSet *mRedisClientMockHashSet) Return(err error) *RedisClientMock {
	if mmHashSet.mock.funcHashSet != nil {
		mmHashSet.mock.t.Fatalf("RedisClientMock.HashSet mock is already set by Set")
	}

	if mmHashSet.defaultExpectation == nil {
		mmHashSet.defaultExpectation = &RedisClientMockHashSetExpectation{mock: mmHashSet.mock}
	}
	mmHashSet.defaultExpectation.results = &RedisClientMockHashSetResults{err}
	return mmHashSet.mock
}

// Set uses given function f to mock the RedisClient.HashSet method
func (mmHashSet *mRedisClientMockHashSet) Set(f func(ctx context.Context, key string, values interface{}) (err error)) *RedisClientMock {
	if mmHashSet.defaultExpectation != nil {
		mmHashSet.mock.t.Fatalf("Default expectation is already set for the RedisClient.HashSet method")
	}

	if len(mmHashSet.expectations) > 0 {
		mmHashSet.mock.t.Fatalf("Some expectations are already set for the RedisClient.HashSet method")
	}

	mmHashSet.mock.funcHashSet = f
	return mmHashSet.mock
}

// When sets expectation for the RedisClient.HashSet which will trigger the result defined by the following
// Then helper
func (mmHashSet *mRedisClientMockHashSet) When(ctx context.Context, key string, values interface{}) *RedisClientMockHashSetExpectation {
	if mmHashSet.mock.funcHashSet != nil {
		mmHashSet.mock.t.Fatalf("RedisClientMock.HashSet mock is already set by Set")
	}

	expectation := &RedisClientMockHashSetExpectation{
		mock:   mmHashSet.mock,
		params: &RedisClientMockHashSetParams{ctx, key, values},
	}
	mmHashSet.expectations = append(mmHashSet.expectations, expectation)
	return expectation
}

// Then sets up RedisClient.HashSet return parameters for the expectation previously defined by the When method
func (e *RedisClientMockHashSetExpectation) Then(err error) *RedisClientMock {
	e.results = &RedisClientMockHashSetResults{err}
	return e.mock
}

// HashSet implements cache.RedisClient
func (mmHashSet *RedisClientMock) HashSet(ctx context.Context, key string, values interface{}) (err error) {
	mm_atomic.AddUint64(&mmHashSet.beforeHashSetCounter, 1)
	defer mm_atomic.AddUint64(&mmHashSet.afterHashSetCounter, 1)

	if mmHashSet.inspectFuncHashSet != nil {
		mmHashSet.inspectFuncHashSet(ctx, key, values)
	}

	mm_params := &RedisClientMockHashSetParams{ctx, key, values}

	// Record call args
	mmHashSet.HashSetMock.mutex.Lock()
	mmHashSet.HashSetMock.callArgs = append(mmHashSet.HashSetMock.callArgs, mm_params)
	mmHashSet.HashSetMock.mutex.Unlock()

	for _, e := range mmHashSet.HashSetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmHashSet.HashSetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHashSet.HashSetMock.defaultExpectation.Counter, 1)
		mm_want := mmHashSet.HashSetMock.defaultExpectation.params
		mm_got := RedisClientMockHashSetParams{ctx, key, values}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHashSet.t.Errorf("RedisClientMock.HashSet got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHashSet.HashSetMock.defaultExpectation.results
		if mm_results == nil {
			mmHashSet.t.Fatal("No results are set for the RedisClientMock.HashSet")
		}
		return (*mm_results).err
	}
	if mmHashSet.funcHashSet != nil {
		return mmHashSet.funcHashSet(ctx, key, values)
	}
	mmHashSet.t.Fatalf("Unexpected call to RedisClientMock.HashSet. %v %v %v", ctx, key, values)
	return
}

// HashSetAfterCounter returns a count of finished RedisClientMock.HashSet invocations
func (mmHashSet *RedisClientMock) HashSetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHashSet.afterHashSetCounter)
}

// HashSetBeforeCounter returns a count of RedisClientMock.HashSet invocations
func (mmHashSet *RedisClientMock) HashSetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHashSet.beforeHashSetCounter)
}

// Calls returns a list of arguments used in each call to RedisClientMock.HashSet.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHashSet *mRedisClientMockHashSet) Calls() []*RedisClientMockHashSetParams {
	mmHashSet.mutex.RLock()

	argCopy := make([]*RedisClientMockHashSetParams, len(mmHashSet.callArgs))
	copy(argCopy, mmHashSet.callArgs)

	mmHashSet.mutex.RUnlock()

	return argCopy
}

// MinimockHashSetDone returns true if the count of the HashSet invocations corresponds
// the number of defined expectations
func (m *RedisClientMock) MinimockHashSetDone() bool {
	for _, e := range m.HashSetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HashSetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHashSetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHashSet != nil && mm_atomic.LoadUint64(&m.afterHashSetCounter) < 1 {
		return false
	}
	return true
}

// MinimockHashSetInspect logs each unmet expectation
func (m *RedisClientMock) MinimockHashSetInspect() {
	for _, e := range m.HashSetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RedisClientMock.HashSet with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HashSetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHashSetCounter) < 1 {
		if m.HashSetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RedisClientMock.HashSet")
		} else {
			m.t.Errorf("Expected call to RedisClientMock.HashSet with params: %#v", *m.HashSetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHashSet != nil && mm_atomic.LoadUint64(&m.afterHashSetCounter) < 1 {
		m.t.Error("Expected call to RedisClientMock.HashSet")
	}
}

type mRedisClientMockPing struct {
	mock               *RedisClientMock
	defaultExpectation *RedisClientMockPingExpectation
	expectations       []*RedisClientMockPingExpectation

	callArgs []*RedisClientMockPingParams
	mutex    sync.RWMutex
}

// RedisClientMockPingExpectation specifies expectation struct of the RedisClient.Ping
type RedisClientMockPingExpectation struct {
	mock    *RedisClientMock
	params  *RedisClientMockPingParams
	results *RedisClientMockPingResults
	Counter uint64
}

// RedisClientMockPingParams contains parameters of the RedisClient.Ping
type RedisClientMockPingParams struct {
	ctx context.Context
}

// RedisClientMockPingResults contains results of the RedisClient.Ping
type RedisClientMockPingResults struct {
	err error
}

// Expect sets up expected params for RedisClient.Ping
func (mmPing *mRedisClientMockPing) Expect(ctx context.Context) *mRedisClientMockPing {
	if mmPing.mock.funcPing != nil {
		mmPing.mock.t.Fatalf("RedisClientMock.Ping mock is already set by Set")
	}

	if mmPing.defaultExpectation == nil {
		mmPing.defaultExpectation = &RedisClientMockPingExpectation{}
	}

	mmPing.defaultExpectation.params = &RedisClientMockPingParams{ctx}
	for _, e := range mmPing.expectations {
		if minimock.Equal(e.params, mmPing.defaultExpectation.params) {
			mmPing.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPing.defaultExpectation.params)
		}
	}

	return mmPing
}

// Inspect accepts an inspector function that has same arguments as the RedisClient.Ping
func (mmPing *mRedisClientMockPing) Inspect(f func(ctx context.Context)) *mRedisClientMockPing {
	if mmPing.mock.inspectFuncPing != nil {
		mmPing.mock.t.Fatalf("Inspect function is already set for RedisClientMock.Ping")
	}

	mmPing.mock.inspectFuncPing = f

	return mmPing
}

// Return sets up results that will be returned by RedisClient.Ping
func (mmPing *mRedisClientMockPing) Return(err error) *RedisClientMock {
	if mmPing.mock.funcPing != nil {
		mmPing.mock.t.Fatalf("RedisClientMock.Ping mock is already set by Set")
	}

	if mmPing.defaultExpectation == nil {
		mmPing.defaultExpectation = &RedisClientMockPingExpectation{mock: mmPing.mock}
	}
	mmPing.defaultExpectation.results = &RedisClientMockPingResults{err}
	return mmPing.mock
}

// Set uses given function f to mock the RedisClient.Ping method
func (mmPing *mRedisClientMockPing) Set(f func(ctx context.Context) (err error)) *RedisClientMock {
	if mmPing.defaultExpectation != nil {
		mmPing.mock.t.Fatalf("Default expectation is already set for the RedisClient.Ping method")
	}

	if len(mmPing.expectations) > 0 {
		mmPing.mock.t.Fatalf("Some expectations are already set for the RedisClient.Ping method")
	}

	mmPing.mock.funcPing = f
	return mmPing.mock
}

// When sets expectation for the RedisClient.Ping which will trigger the result defined by the following
// Then helper
func (mmPing *mRedisClientMockPing) When(ctx context.Context) *RedisClientMockPingExpectation {
	if mmPing.mock.funcPing != nil {
		mmPing.mock.t.Fatalf("RedisClientMock.Ping mock is already set by Set")
	}

	expectation := &RedisClientMockPingExpectation{
		mock:   mmPing.mock,
		params: &RedisClientMockPingParams{ctx},
	}
	mmPing.expectations = append(mmPing.expectations, expectation)
	return expectation
}

// Then sets up RedisClient.Ping return parameters for the expectation previously defined by the When method
func (e *RedisClientMockPingExpectation) Then(err error) *RedisClientMock {
	e.results = &RedisClientMockPingResults{err}
	return e.mock
}

// Ping implements cache.RedisClient
func (mmPing *RedisClientMock) Ping(ctx context.Context) (err error) {
	mm_atomic.AddUint64(&mmPing.beforePingCounter, 1)
	defer mm_atomic.AddUint64(&mmPing.afterPingCounter, 1)

	if mmPing.inspectFuncPing != nil {
		mmPing.inspectFuncPing(ctx)
	}

	mm_params := &RedisClientMockPingParams{ctx}

	// Record call args
	mmPing.PingMock.mutex.Lock()
	mmPing.PingMock.callArgs = append(mmPing.PingMock.callArgs, mm_params)
	mmPing.PingMock.mutex.Unlock()

	for _, e := range mmPing.PingMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmPing.PingMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPing.PingMock.defaultExpectation.Counter, 1)
		mm_want := mmPing.PingMock.defaultExpectation.params
		mm_got := RedisClientMockPingParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPing.t.Errorf("RedisClientMock.Ping got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPing.PingMock.defaultExpectation.results
		if mm_results == nil {
			mmPing.t.Fatal("No results are set for the RedisClientMock.Ping")
		}
		return (*mm_results).err
	}
	if mmPing.funcPing != nil {
		return mmPing.funcPing(ctx)
	}
	mmPing.t.Fatalf("Unexpected call to RedisClientMock.Ping. %v", ctx)
	return
}

// PingAfterCounter returns a count of finished RedisClientMock.Ping invocations
func (mmPing *RedisClientMock) PingAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPing.afterPingCounter)
}

// PingBeforeCounter returns a count of RedisClientMock.Ping invocations
func (mmPing *RedisClientMock) PingBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPing.beforePingCounter)
}

// Calls returns a list of arguments used in each call to RedisClientMock.Ping.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPing *mRedisClientMockPing) Calls() []*RedisClientMockPingParams {
	mmPing.mutex.RLock()

	argCopy := make([]*RedisClientMockPingParams, len(mmPing.callArgs))
	copy(argCopy, mmPing.callArgs)

	mmPing.mutex.RUnlock()

	return argCopy
}

// MinimockPingDone returns true if the count of the Ping invocations corresponds
// the number of defined expectations
func (m *RedisClientMock) MinimockPingDone() bool {
	for _, e := range m.PingMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PingMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPingCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPing != nil && mm_atomic.LoadUint64(&m.afterPingCounter) < 1 {
		return false
	}
	return true
}

// MinimockPingInspect logs each unmet expectation
func (m *RedisClientMock) MinimockPingInspect() {
	for _, e := range m.PingMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RedisClientMock.Ping with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PingMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPingCounter) < 1 {
		if m.PingMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RedisClientMock.Ping")
		} else {
			m.t.Errorf("Expected call to RedisClientMock.Ping with params: %#v", *m.PingMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPing != nil && mm_atomic.LoadUint64(&m.afterPingCounter) < 1 {
		m.t.Error("Expected call to RedisClientMock.Ping")
	}
}

type mRedisClientMockSet struct {
	mock               *RedisClientMock
	defaultExpectation *RedisClientMockSetExpectation
	expectations       []*RedisClientMockSetExpectation

	callArgs []*RedisClientMockSetParams
	mutex    sync.RWMutex
}

// RedisClientMockSetExpectation specifies expectation struct of the RedisClient.Set
type RedisClientMockSetExpectation struct {
	mock    *RedisClientMock
	params  *RedisClientMockSetParams
	results *RedisClientMockSetResults
	Counter uint64
}

// RedisClientMockSetParams contains parameters of the RedisClient.Set
type RedisClientMockSetParams struct {
	ctx   context.Context
	key   string
	value interface{}
}

// RedisClientMockSetResults contains results of the RedisClient.Set
type RedisClientMockSetResults struct {
	err error
}

// Expect sets up expected params for RedisClient.Set
func (mmSet *mRedisClientMockSet) Expect(ctx context.Context, key string, value interface{}) *mRedisClientMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("RedisClientMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &RedisClientMockSetExpectation{}
	}

	mmSet.defaultExpectation.params = &RedisClientMockSetParams{ctx, key, value}
	for _, e := range mmSet.expectations {
		if minimock.Equal(e.params, mmSet.defaultExpectation.params) {
			mmSet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSet.defaultExpectation.params)
		}
	}

	return mmSet
}

// Inspect accepts an inspector function that has same arguments as the RedisClient.Set
func (mmSet *mRedisClientMockSet) Inspect(f func(ctx context.Context, key string, value interface{})) *mRedisClientMockSet {
	if mmSet.mock.inspectFuncSet != nil {
		mmSet.mock.t.Fatalf("Inspect function is already set for RedisClientMock.Set")
	}

	mmSet.mock.inspectFuncSet = f

	return mmSet
}

// Return sets up results that will be returned by RedisClient.Set
func (mmSet *mRedisClientMockSet) Return(err error) *RedisClientMock {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("RedisClientMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &RedisClientMockSetExpectation{mock: mmSet.mock}
	}
	mmSet.defaultExpectation.results = &RedisClientMockSetResults{err}
	return mmSet.mock
}

// Set uses given function f to mock the RedisClient.Set method
func (mmSet *mRedisClientMockSet) Set(f func(ctx context.Context, key string, value interface{}) (err error)) *RedisClientMock {
	if mmSet.defaultExpectation != nil {
		mmSet.mock.t.Fatalf("Default expectation is already set for the RedisClient.Set method")
	}

	if len(mmSet.expectations) > 0 {
		mmSet.mock.t.Fatalf("Some expectations are already set for the RedisClient.Set method")
	}

	mmSet.mock.funcSet = f
	return mmSet.mock
}

// When sets expectation for the RedisClient.Set which will trigger the result defined by the following
// Then helper
func (mmSet *mRedisClientMockSet) When(ctx context.Context, key string, value interface{}) *RedisClientMockSetExpectation {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("RedisClientMock.Set mock is already set by Set")
	}

	expectation := &RedisClientMockSetExpectation{
		mock:   mmSet.mock,
		params: &RedisClientMockSetParams{ctx, key, value},
	}
	mmSet.expectations = append(mmSet.expectations, expectation)
	return expectation
}

// Then sets up RedisClient.Set return parameters for the expectation previously defined by the When method
func (e *RedisClientMockSetExpectation) Then(err error) *RedisClientMock {
	e.results = &RedisClientMockSetResults{err}
	return e.mock
}

// Set implements cache.RedisClient
func (mmSet *RedisClientMock) Set(ctx context.Context, key string, value interface{}) (err error) {
	mm_atomic.AddUint64(&mmSet.beforeSetCounter, 1)
	defer mm_atomic.AddUint64(&mmSet.afterSetCounter, 1)

	if mmSet.inspectFuncSet != nil {
		mmSet.inspectFuncSet(ctx, key, value)
	}

	mm_params := &RedisClientMockSetParams{ctx, key, value}

	// Record call args
	mmSet.SetMock.mutex.Lock()
	mmSet.SetMock.callArgs = append(mmSet.SetMock.callArgs, mm_params)
	mmSet.SetMock.mutex.Unlock()

	for _, e := range mmSet.SetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSet.SetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSet.SetMock.defaultExpectation.Counter, 1)
		mm_want := mmSet.SetMock.defaultExpectation.params
		mm_got := RedisClientMockSetParams{ctx, key, value}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSet.t.Errorf("RedisClientMock.Set got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSet.SetMock.defaultExpectation.results
		if mm_results == nil {
			mmSet.t.Fatal("No results are set for the RedisClientMock.Set")
		}
		return (*mm_results).err
	}
	if mmSet.funcSet != nil {
		return mmSet.funcSet(ctx, key, value)
	}
	mmSet.t.Fatalf("Unexpected call to RedisClientMock.Set. %v %v %v", ctx, key, value)
	return
}

// SetAfterCounter returns a count of finished RedisClientMock.Set invocations
func (mmSet *RedisClientMock) SetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.afterSetCounter)
}

// SetBeforeCounter returns a count of RedisClientMock.Set invocations
func (mmSet *RedisClientMock) SetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.beforeSetCounter)
}

// Calls returns a list of arguments used in each call to RedisClientMock.Set.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSet *mRedisClientMockSet) Calls() []*RedisClientMockSetParams {
	mmSet.mutex.RLock()

	argCopy := make([]*RedisClientMockSetParams, len(mmSet.callArgs))
	copy(argCopy, mmSet.callArgs)

	mmSet.mutex.RUnlock()

	return argCopy
}

// MinimockSetDone returns true if the count of the Set invocations corresponds
// the number of defined expectations
func (m *RedisClientMock) MinimockSetDone() bool {
	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSet != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetInspect logs each unmet expectation
func (m *RedisClientMock) MinimockSetInspect() {
	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RedisClientMock.Set with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		if m.SetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RedisClientMock.Set")
		} else {
			m.t.Errorf("Expected call to RedisClientMock.Set with params: %#v", *m.SetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSet != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		m.t.Error("Expected call to RedisClientMock.Set")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RedisClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockExpireInspect()

		m.MinimockGetInspect()

		m.MinimockHGetAllInspect()

		m.MinimockHashSetInspect()

		m.MinimockPingInspect()

		m.MinimockSetInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RedisClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RedisClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockExpireDone() &&
		m.MinimockGetDone() &&
		m.MinimockHGetAllDone() &&
		m.MinimockHashSetDone() &&
		m.MinimockPingDone() &&
		m.MinimockSetDone()
}
